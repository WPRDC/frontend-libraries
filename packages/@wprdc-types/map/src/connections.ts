import React from 'react';

import { Expression } from 'mapbox-gl';
import { LayerProps, MapEvent, SourceProps } from 'react-map-gl';

import { CollectionElement, Selection } from '@react-types/shared';

import { GeogBrief } from '@wprdc-types/geo';
import { ColorScheme } from '@wprdc-types/shared';

import { LegendItemProps } from './legend';
import { ClickPopupProps, HoverPopupProps, PopupProps } from './popup';

export type MapPluginGetter<T extends object, R> = (
  items: T[],
  selected: Selection,
  callback: (r: R) => any,
  context?: MapPluginContext,
) => any;

export type MapPluginHook<T extends object, E> = (
  args: MapPluginHookArgs<T, E>,
) => MapPluginToolbox<T, E>;

/** Args for MapPluginConnection.use() */
export interface MapPluginHookArgs<T extends object, E>
  extends ContextArgs,
    MapPluginUserArgs<T, E> {
  /** Collection of project specific methods and values */
  connection: MapPluginConnection<T, E>;
}

/**  */
export interface MapPluginUserArgs<T extends object, E = any> {
  /** List of objects that represent the layers for the plugin */
  layerItems?: T[];

  /** Selection object representing set of keys of the selected layers */
  layerSelection?: Selection;

  /** The selected item if controlled from outside scope */
  selectedMapItem?: E;

  /** Filter for MapboxStyle to display hover state */
  hoverFilter?: Expression;

  /** Filter for MapboxStyle to display selected state */
  selectedFilter?: Expression;
}

export type MapPluginContext = Record<string, any>;

export interface ContextArgs {
  /** state shared between plugins */
  context: Record<string, any>;
  /** setter used to update context */
  setContext: React.Dispatch<React.SetStateAction<MapPluginContext>>;
}

export type ConnectionHookArgs<T extends object, E> = MapPluginUserArgs<T, E> &
  ContextArgs;

export interface MapPluginConnection<T extends object, E> {
  /** Name used to identify plugin */
  name?: string;

  use: MapPluginHook<T, E>;

  /** Generate MapBox sources based on state of interaction */
  getSources: MapPluginGetter<T, SourceProps[]>;

  /** Generate MapBox layers based on state of interaction */
  getLayers: MapPluginGetter<T, LayerProps[]>;

  /** Generate legend item data based on selected categories of type T */
  getLegendItems: MapPluginGetter<T, LegendItemProps[]>;

  /** Get array of Layer IDs that the user can interact with.*/
  getInteractiveLayerIDs: (items: T[], selected: Selection) => string[];

  /** Function to read MapEvent data and extract project items from it */
  parseMapEvent: (event: MapEvent, ctx?: MapPluginContext) => E[];

  /** Make mapbox filter expression that limits map to item or items provided. */
  makeFilter: (item: E[] | E) => Expression;

  /** Generates a LegendSection populated with LegendItems corresponding to provided layers */
  makeLegendSection: (
    setLegendSection: (elem?: JSX.Element) => void,
    items?: LegendItemProps[],
  ) => void | null;

  /** Make element containing the react-map-gl Source and Layer for rendering. */
  makeMapSection: (
    /** useState setter from hook to save results */
    setMapSection: (elem?: JSX.Element) => void,
    sources?: SourceProps[],
    layers?: LayerProps[],
  ) => void | null;

  /** Function that uses the current selection to filter the fulls set of items. */
  getSelectedItems: (items: T[], selection: Selection) => T[];

  /** Generates a LegendSection populated with LegendItems corresponding to provided layers */
  makeLayerPanelSection: (
    /** useState setter from hook to save results */
    setLayerPanelSection: (elem?: JSX.Element) => void,
    items?: T[],
    handleChange?: (value: string | string[]) => void,
  ) => void | null;

  /** Arguments to pass to hook provided by user in factory */
  hookArgs?: ConnectionHookArgs<T, E>;
}

/**
 * Data and functions provided by  MapPluginConnection hooks
 */
export interface MapPluginToolbox<T, E> {
  /** Items that represent layers on the map */
  layerItems?: T[];

  /** Mapbox source props generated by plugin */
  sources?: SourceProps[];

  /** Mapbox layer props generated by plugin */
  layers?: LayerProps[];

  /** LegendItem props generated by the plugin */
  legendItems?: LegendItemProps[];

  /** IDs of interactive layers in `layers` */
  interactiveLayerIDs: string[];

  /** Generated map section containing react tree with react-map-gl source and layers components. */
  mapSection?: JSX.Element | null;

  /** Callback fired when a layer is selected */
  handleLayerSelection: (selection: Selection) => void;

  /** Callback fired on hover events */
  handleHover: (event: MapEvent) => E[];

  /** Callback fired on click events */
  handleClick: (event: MapEvent) => E[];

  /**  */
  content?: JSX.Element;

  /** Generated legend content for this plugin */
  legendSection?: React.ReactNode;

  /** Collection of item objects that are selected */
  selectedItems?: T[];

  /** Generated menu section for layer panel */
  layerPanelSection?: CollectionElement<object>;
}

export interface APIMapBoxResponse {
  source: SourceProps;
  layers: (LayerProps & { 'source-layer': string; id: string })[];
  extras: {
    legendItems: LegendItemProps[];
  };
}

export interface WithToolboxes {
  toolboxes: MapPluginToolbox<any, any>[];
}

export type ConnectionCollection = MapPluginConnection<object, any>[];

export type Connected<T> = T & {
  connections?: ConnectionCollection;
};

export type ConnectedPopupProps = Connected<PopupProps>;
export type ConnectedHoverPopupProps = Connected<HoverPopupProps>;
export type ConnectedClickPopupProps = Connected<ClickPopupProps>;
